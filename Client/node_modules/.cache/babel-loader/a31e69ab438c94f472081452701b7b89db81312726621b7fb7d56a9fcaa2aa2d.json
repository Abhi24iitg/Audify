{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\audifyabhishek\\\\audify\\\\src\\\\Audiofiles.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Audios() {\n  _s();\n  const [audioFiles, setAudioFiles] = useState([]);\n  useEffect(() => {\n    fetchAudioFiles();\n  }, []);\n  const email = JSON.parse(localStorage.getItem('useraudify')).email;\n  const fetchAudioFiles = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/audify?email=${email}`);\n      if (response.ok) {\n        const data = await response.json();\n        consol;\n        setAudioFiles(data.audioArray);\n      } else {\n        console.error('Failed to fetch audio files:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Failed to fetch audio files:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Audio Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this), audioFiles.map(audio => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: audio.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: `http://localhost:5000/audify/${audio.filename}`,\n            type: \"audio/mpeg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, audio._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Audios, \"3g/no86fpXfgub4JPNiIy/EUcGk=\");\n_c = Audios;\nexport default Audios;\nvar _c;\n$RefreshReg$(_c, \"Audios\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Audios","_s","audioFiles","setAudioFiles","fetchAudioFiles","email","JSON","parse","localStorage","getItem","response","fetch","ok","data","json","consol","audioArray","console","error","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","map","audio","filename","controls","src","type","_id","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/audifyabhishek/audify/src/Audiofiles.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Audios() {\r\n  const [audioFiles, setAudioFiles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAudioFiles();\r\n  }, []);\r\n  const email=JSON.parse(localStorage.getItem('useraudify')).email;\r\n  const fetchAudioFiles = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/audify?email=${email}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        consol\r\n        setAudioFiles(data.audioArray);\r\n      } else {\r\n        console.error('Failed to fetch audio files:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch audio files:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      <h1>Audio Files</h1>\r\n      {audioFiles.map((audio) => (\r\n        <div key={audio._id}>\r\n          <h2>{audio.filename}</h2>\r\n          <audio controls>\r\n            <source src={`http://localhost:5000/audify/${audio.filename}`} type=\"audio/mpeg\" />\r\n          </audio>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Audios;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdS,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,KAAK,GAACC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAACJ,KAAK;EAChE,MAAMD,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCN,KAAM,EAAC,CAAC;MAC3E,IAAIK,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCC,MAAM;QACNZ,aAAa,CAACU,IAAI,CAACG,UAAU,CAAC;MAChC,CAAC,MAAM;QACLC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAER,QAAQ,CAACS,UAAU,CAAC;MACpE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,oBACErB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACAvB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnBtB,UAAU,CAACuB,GAAG,CAAEC,KAAK,iBACpB7B,OAAA;QAAAuB,QAAA,gBACEvB,OAAA;UAAAuB,QAAA,EAAKM,KAAK,CAACC;QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzB3B,OAAA;UAAO+B,QAAQ;UAAAR,QAAA,eACbvB,OAAA;YAAQgC,GAAG,EAAG,gCAA+BH,KAAK,CAACC,QAAS,EAAE;YAACG,IAAI,EAAC;UAAY;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9E,CAAC;MAAA,GAJAE,KAAK,CAACK,GAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACJ,CAAC;AAEP;AAACvB,EAAA,CArCQD,MAAM;AAAAgC,EAAA,GAANhC,MAAM;AAuCf,eAAeA,MAAM;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}